// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package easy_crypto_wallet_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EasyCryptoWalletServiceClient is the client API for EasyCryptoWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EasyCryptoWalletServiceClient interface {
	GetEthereumBalance(ctx context.Context, in *GetEthereumBalanceRequest, opts ...grpc.CallOption) (*GetEthereumBalanceResponse, error)
}

type easyCryptoWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEasyCryptoWalletServiceClient(cc grpc.ClientConnInterface) EasyCryptoWalletServiceClient {
	return &easyCryptoWalletServiceClient{cc}
}

func (c *easyCryptoWalletServiceClient) GetEthereumBalance(ctx context.Context, in *GetEthereumBalanceRequest, opts ...grpc.CallOption) (*GetEthereumBalanceResponse, error) {
	out := new(GetEthereumBalanceResponse)
	err := c.cc.Invoke(ctx, "/easy_crypto_wallet_service.EasyCryptoWalletService/GetEthereumBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EasyCryptoWalletServiceServer is the server API for EasyCryptoWalletService service.
// All implementations should embed UnimplementedEasyCryptoWalletServiceServer
// for forward compatibility
type EasyCryptoWalletServiceServer interface {
	GetEthereumBalance(context.Context, *GetEthereumBalanceRequest) (*GetEthereumBalanceResponse, error)
}

// UnimplementedEasyCryptoWalletServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEasyCryptoWalletServiceServer struct {
}

func (UnimplementedEasyCryptoWalletServiceServer) GetEthereumBalance(context.Context, *GetEthereumBalanceRequest) (*GetEthereumBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthereumBalance not implemented")
}

// UnsafeEasyCryptoWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EasyCryptoWalletServiceServer will
// result in compilation errors.
type UnsafeEasyCryptoWalletServiceServer interface {
	mustEmbedUnimplementedEasyCryptoWalletServiceServer()
}

func RegisterEasyCryptoWalletServiceServer(s *grpc.Server, srv EasyCryptoWalletServiceServer) {
	s.RegisterService(&_EasyCryptoWalletService_serviceDesc, srv)
}

func _EasyCryptoWalletService_GetEthereumBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEthereumBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCryptoWalletServiceServer).GetEthereumBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/easy_crypto_wallet_service.EasyCryptoWalletService/GetEthereumBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCryptoWalletServiceServer).GetEthereumBalance(ctx, req.(*GetEthereumBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EasyCryptoWalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "easy_crypto_wallet_service.EasyCryptoWalletService",
	HandlerType: (*EasyCryptoWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEthereumBalance",
			Handler:    _EasyCryptoWalletService_GetEthereumBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "easy_crypto_wallet_service.proto",
}
